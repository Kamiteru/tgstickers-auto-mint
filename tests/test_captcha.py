#!/usr/bin/env python3
"""
Test Captcha System - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á
"""

import asyncio
import sys
import os
import pytest

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.captcha_solver import CaptchaManager, CaptchaChallenge
from utils.notifications import TelegramNotifier
from utils.logger import logger


@pytest.mark.asyncio
async def test_captcha_detection():
    """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–ø—á–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""
    logger.info("üß™ Testing captcha detection...")
    
    notifier = TelegramNotifier()
    captcha_manager = CaptchaManager(notifier)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–∞–ø—á
    test_responses = [
        # reCAPTCHA
        {
            "error": "captcha_required",
            "captcha_type": "recaptcha",
            "site_key": "6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI"
        },
        # hCaptcha
        {
            "error": "verification_required",
            "hcaptcha": {
                "site_key": "10000000-ffff-ffff-ffff-000000000001"
            }
        },
        # –ü—Ä–æ—Å—Ç–∞—è –∫–∞–ø—á–∞
        {
            "message": "Please solve captcha",
            "captcha": "required"
        },
        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        {
            "ok": True,
            "data": {"order_id": "test"}
        }
    ]
    
    for i, response in enumerate(test_responses):
        logger.info(f"\n--- Test Response {i+1} ---")
        challenge = captcha_manager.detect_captcha(response)
        
        if challenge:
            logger.info(f"‚úÖ Captcha detected: {challenge.captcha_type}")
            logger.info(f"   Site URL: {challenge.site_url}")
            logger.info(f"   Site Key: {challenge.site_key}")
        else:
            logger.info("‚ö™ No captcha detected")


@pytest.mark.asyncio
async def test_manual_captcha():
    """–¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
    logger.info("\nü§ñ Testing manual captcha solving...")
    
    notifier = TelegramNotifier()
    captcha_manager = CaptchaManager(notifier)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞–ø—á—É
    challenge = CaptchaChallenge(
        captcha_type="test_captcha",
        site_url="https://stickerdom.store",
        site_key="test_key"
    )
    
    logger.info("üìù Creating captcha_solved.flag file for testing...")
    with open('captcha_solved.flag', 'w') as f:
        f.write('test_solution_token')
    
    try:
        solution = await captcha_manager.solve_captcha(challenge)
        logger.info(f"‚úÖ Solution received: {solution.token}")
        logger.info(f"   Method: {solution.solver_method}")
        logger.info(f"   Time: {solution.solution_time:.1f}s")
    except Exception as e:
        logger.error(f"‚ùå Manual captcha test failed: {e}")


@pytest.mark.asyncio
async def test_service_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á"""
    logger.info("\nüåê Testing captcha service integration...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    from config import settings
    
    if hasattr(settings, 'anticaptcha_api_key') and settings.anticaptcha_api_key:
        logger.info("‚úÖ Anti-captcha API key configured")
    else:
        logger.warning("‚ö†Ô∏è Anti-captcha API key not configured")
    
    if settings.captcha_enabled:
        logger.info("‚úÖ Captcha solving enabled")
    else:
        logger.warning("‚ö†Ô∏è Captcha solving disabled")


async def main():
    if len(sys.argv) > 1:
        test_type = sys.argv[1]
    else:
        test_type = "all"
    
    logger.info("üîê Starting Captcha System Tests")
    logger.info("="*50)
    
    try:
        if test_type in ["all", "detection"]:
            await test_captcha_detection()
        
        if test_type in ["all", "manual"]:
            await test_manual_captcha()
        
        if test_type in ["all", "integration"]:
            await test_service_integration()
        
        logger.info("\n" + "="*50)
        logger.info("‚úÖ All captcha tests completed!")
        
    except Exception as e:
        logger.error(f"‚ùå Captcha tests failed: {e}")
        sys.exit(1)


if __name__ == "__main__":
    print("Usage: python test_captcha.py [test_type]")
    print("test_types: all (default), detection, manual, integration")
    print()
    asyncio.run(main()) 